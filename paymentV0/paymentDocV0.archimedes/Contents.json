{
  "sections" : [
    {
      "type" : "plain",
      "contents" : "写一个 Python 实现的最小支付系统样例（含 webhook + idempotency 处理）\n\n\n下面是一个Python 最小支付系统样例，用 Flask 模拟一个典型支付流程，包括：\n\n创建订单并发起支付\n\n模拟支付网关回调（Webhook）\n\n实现幂等处理（防止重复扣款）\n\n🛠 环境要求\nPython 3.8+\n\nFlask\n\nRedis（用于幂等性检查）\n\n你可以用如下命令安装依赖：\n\nbash\nCopy\nEdit\npip install flask redis\n📦 目录结构\nbash\nCopy\nEdit\npayment_demo\/\n├── app.py               # 主程序\n├── redis_client.py      # Redis 客户端工具\n└── simulate_gateway.py  # 模拟支付平台回调\n\n\n1️⃣ redis_client.py\npython\nCopy\nEdit\nimport redis\n\n# 本地 Redis 默认配置\nr = redis.Redis(host=\"localhost\", port=6379, db=0, decode_responses=True)\n\ndef set_idempotency_key(key: str, value: str, ttl: int = 600):\n    if not r.exists(key):\n        r.set(key, value, ex=ttl)\n        return True\n    return False\n\ndef get_value(key: str):\n    return r.get(key)\n\n\n2️⃣ app.py（主服务）\npython\nCopy\nEdit\nfrom flask import Flask, request, jsonify\nfrom redis_client import set_idempotency_key, get_value\nimport uuid\n\napp = Flask(__name__)\n\n# 模拟数据库（内存）\nORDERS = {}\nPAYMENTS = {}\n\n@app.route(\"\/create_order\", methods=[\"POST\"])\ndef create_order():\n    user_id = request.json[\"user_id\"]\n    amount = request.json[\"amount\"]\n    order_id = str(uuid.uuid4())\n    \n    ORDERS[order_id] = {\n        \"user_id\": user_id,\n        \"amount\": amount,\n        \"status\": \"PENDING\"\n    }\n\n    return jsonify({\"order_id\": order_id})\n\n@app.route(\"\/initiate_payment\", methods=[\"POST\"])\ndef initiate_payment():\n    order_id = request.json[\"order_id\"]\n    payment_id = str(uuid.uuid4())\n    idempotency_key = f\"payment:{payment_id}\"\n\n    if not set_idempotency_key(idempotency_key, \"initiated\"):\n        return jsonify({\"error\": \"Duplicate payment\"}), 409\n\n    PAYMENTS[payment_id] = {\n        \"order_id\": order_id,\n        \"status\": \"PENDING\"\n    }\n\n    # 假设支付链接为模拟跳转\n    return jsonify({\n        \"payment_id\": payment_id,\n        \"payment_url\": f\"http:\/\/localhost:5000\/simulate_gateway_callback\/{payment_id}\"\n    })\n\n@app.route(\"\/webhook\/payment_callback\", methods=[\"POST\"])\ndef payment_callback():\n    payment_id = request.json[\"payment_id\"]\n    success = request.json[\"success\"]\n    idempotency_key = f\"callback:{payment_id}\"\n\n    if not set_idempotency_key(idempotency_key, \"received\"):\n        return jsonify({\"message\": \"Duplicate callback\"}), 200\n\n    payment = PAYMENTS.get(payment_id)\n    if not payment:\n        return jsonify({\"error\": \"Invalid payment ID\"}), 404\n\n    if success:\n        payment[\"status\"] = \"PAID\"\n        order_id = payment[\"order_id\"]\n        ORDERS[order_id][\"status\"] = \"PAID\"\n    else:\n        payment[\"status\"] = \"FAILED\"\n\n    return jsonify({\"message\": \"Callback processed\"})\n\n@app.route(\"\/orders\", methods=[\"GET\"])\ndef get_orders():\n    return jsonify(ORDERS)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n\n\n3️⃣ simulate_gateway.py（模拟支付平台回调）\npython\nCopy\nEdit\nimport requests\nimport sys\n\npayment_id = sys.argv[1] if len(sys.argv) > 1 else None\nif not payment_id:\n    print(\"Usage: python simulate_gateway.py <payment_id>\")\n    exit()\n\nres = requests.post(\"http:\/\/localhost:5000\/webhook\/payment_callback\", json={\n    \"payment_id\": payment_id,\n    \"success\": True\n})\n\nprint(\"Webhook sent:\", res.status_code, res.json())\n\n\n🔁 流程演示（本地端口为 5000）\n启动 Redis\n\n启动 Flask 服务：\n\nbash\nCopy\nEdit\npython app.py\n创建订单：\n\nbash\nCopy\nEdit\ncurl -X POST http:\/\/localhost:5000\/create_order -H \"Content-Type: application\/json\" -d '{\"user_id\": \"u001\", \"amount\": 100}'\n发起支付：\n\nbash\nCopy\nEdit\ncurl -X POST http:\/\/localhost:5000\/initiate_payment -H \"Content-Type: application\/json\" -d '{\"order_id\": \"<上一步返回的order_id>\"}'\n用返回的 payment_id 触发 webhook 模拟：\n\nbash\nCopy\nEdit\npython simulate_gateway.py <payment_id>\n查看订单状态：\n\nbash\nCopy\nEdit\ncurl http:\/\/localhost:5000\/orders\n\n\n✅ 幂等性保证点\n场景\tKey\t功能\n发起支付\tpayment:{payment_id}\t避免重复提交支付\n支付回调\tcallback:{payment_id}\t避免重复处理回调（如多次回调）\n\n🧠 下一步你可以扩展：\n使用真实数据库（PostgreSQL, MySQL）\n\n加入 MQ 消息队列实现异步状态流转\n\n增加超时关闭、退款等状态\n\n增加订单状态机控制\n\n如你想，我也可以帮你接入 Stripe \/ 微信支付 真实网关接口版本。是否需要继续升级？\n\n\n\n"
    }
  ],
  "metadata" : {
    "leftMargin" : 2.54,
    "bottomMargin" : 2.54,
    "pageSize" : 0,
    "rightMargin" : 2.54,
    "indentStyle" : "tabs",
    "pageNumberingEnabled" : false,
    "indentWidth" : 4,
    "writingDirection" : -1,
    "topMargin" : 2.54,
    "previewStyle" : "preview_modern"
  }
}